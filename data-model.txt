Data model for the app
----------------------

=> change auth app
    - add a field user_type (IntegerField) (enum type)
    - authentication using user_type, username, password

model Dept:
    - id (automatic)
    - code (CharField(max_length=5))
    - name (CharField(max_length=45))

model Student:
    - id (automatic)
    - user (OneToOneField(User))
    - dept (ForeignKey(Dept))
    - semester (IntegerField)
    - cpi (DecimalField)

model Professor:
    - id (automatic)
    - user (OneToOneField(User))
    - dept (ForeignKey)

model DUGC:
    - id (automatic)
    - dept (ForeignKey(Dept))
    - professor (ForeignKey(Professor))

model CourseType:
    - id (automatic)
    - code (CharField(max_length=5))

model Course:
    - id (automatic)
    - department (ForeignKey(Dept))
    - course_type (ForeignKey(CourseType)) (ex. CS, ESO, etc. )
    - code (CharField(max_length=8))
    - name (CharField(max_length=50))
    - professors (ManyToManyField(Professor))
    - prerequisites (ManyToManyField(Course))
    - is_offered (BooleanField)
    - limit (PositiveIntegerField)
    - credits (IntegerField) (format: [L][T][P])
   *- schedule (CommaSeparatedIntegerField) (format: [type = 1(L) | 2(T) | 3(P)][day = 01 | 02 | 04 | 08 |16][start_time = 24-hour clock time][2*duration])
    - description (TextField)
    - notes (CharField(max_length=100))

model Request:
    - id (automatic)
    - course (Course)
    - student (Student)
    - status (IntegerField) (!!to be decided options: waiting, accepted, rejected)
    - limit_exceeded (BooleanField)

model CurrentCourse:
    - id (automatic)
    - course (ForeignKey(Course))
    - student (ForeignKey(Student))

model PreviousCourses:
    - id (automatic)
    - course (ForeignKey(Course))
    - student (ForeignKey(Student))
    - semester (IntegerField)
    - grade (IntegerField)

model Filter:
    - id (automatic)
    - department (ForeignKey(Department))
    - min_semester (PositiveSmallIntegerField)
    - max_semester (PositiveSmallIntegerField)
    - min_cpi (PositiveSmallIntegerField)
    - filter_type (PositiveSmallIntegerField) (format: settings.ACCEPTED(1) for accept, settings.REJECTED(2) for reject, [11-20] for preferences)